<?php

require '../app/vendor/autoload.php';

$test_mode = isset($argv[1]) && $argv[1] = 'test';

$connections = \Pikd\DB::getConnections();

$product_db = $connections->getRead('product');
$customer_db = $connections->getRead('customer');

/********************************************************/
/********************************************************/

// We want to rename some of the enum values manually
// so they are easier to reason about in code
$manual_map = [
    'L' => 'LITER',
    'qt' => 'QUART',
    'pt' => 'PINT',
    'gal' => 'GALLON',
];

$product_enums = getEnums($product_db);
foreach ($product_enums as $enum) {
    getEnumClass($product_db, $enum, $manual_map, $test_mode);
}

$customer_enums = getEnums($customer_db);
foreach ($customer_enums as $enum) {
    getEnumClass($customer_db, $enum, $manual_map, $test_mode);
}


function getEnums($db) {
    $sql = 'SELECT distinct(pg_type.typname) AS enumtype
                FROM pg_type
                JOIN pg_enum
                ON pg_enum.enumtypid = pg_type.oid;';

    $results = $db->fetchAll($sql);

    $enums = [];
    foreach ($results as $e) {
        $enums[] = $e['enumtype'];
    }

    return $enums;
}

function getEnumClass($db, $enum, $manual_map, $test_mode) {
    $sql = 'SELECT enum_range(NULL::' . $enum .');';

    $results = $db->fetchAll($sql);

    // This is a string like {foo,bar}
    $values = $results[0]['enum_range'];

    $enum_name = strtoupper($enum);

    // Process the string
    $values = explode(',', str_replace('"', '', substr($values, 1, -1)));

    $out = '<?php
/**
 * ==========================================
 * AUTOGENERATED FROM POSTGRESQL DATA
 * DO NOT EDIT DIRECTLY!!!
 * TO MODIFY, EDIT scripts/generate_enums.php
 * ==========================================
 * 
 * ' . $enum_name . ' Enum 
 *
 * @author      A Computer
 * @copyright   (c) 2015 G2G Market, Inc
 ********************************** 80 Columns *********************************
 */

namespace Pikd\Enum;

class ' . $enum_name . ' {' . PHP_EOL . PHP_EOL;

    foreach ($values as $v) {
        $out .= "\tconst ";
        if (array_key_exists($v, $manual_map)) {
            $out .= $manual_map[$v];
        } else {
            $out .= strtoupper(str_replace(' ', '_', $v));
        }
        $out .= " = '" . $v . "';" . PHP_EOL;
    }

    $out .= PHP_EOL . '}';

    if ($test_mode) {
        echo $out;
    } else {
        file_put_contents('../app/src/Enums/' . $enum_name . '.php', $out);
    }
}






